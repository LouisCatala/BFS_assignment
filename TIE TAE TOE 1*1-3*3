#TIC TAE TOE  #2 different board sizes
from math import inf as infinity
import random
from random import choice
import platform
import time
from os import system

COMP1 = +1
COMP2 = -1


def evaluate(state):
    if wins(state, COMP1):
        score = +1
    elif wins(state, COMP2):
        score = -1
    else:
        score = 0

    return score


def wins(state, player):
    size = len(state)
    # Check rows and columns
    for i in range(size):
        if all([state[i][j] == player for j in range(size)]) or all([state[j][i] == player for j in range(size)]):
            return True

    # Check diagonals
    if all([state[i][i] == player for i in range(size)]) or all([state[i][size - 1 - i] == player for i in range(size)]):
        return True

    return False

def game_over(state):
    return wins(state, COMP1) or wins(state, COMP2)



def empty_cells(state):
    #return: a list of empty cells
    cells = []

    for x, row in enumerate(state):
        for y, cell in enumerate(row):
            if cell == 0:
                cells.append([x, y])

    return cells


def valid_move(x, y):
    #A move is valid if the chosen cell is empty
    #return: True if the board[x][y] is empty
    if [x, y] in empty_cells(board):
        return True
    else:
        return False


def set_move(x, y, player):
    #Set the move on board, if the coordinates are valid
    if valid_move(x, y):
        board[x][y] = player
        return True
    else:
        return False


def minimax(state, depth, player):
    if player == COMP1:
        best = [-1, -1, -infinity]
    else:
        best = [-1, -1, +infinity]

    if depth == 0 or game_over(state):
        score = evaluate(state)
        return [-1, -1, score]

    for cell in empty_cells(state):
        x, y = cell[0], cell[1]
        state[x][y] = player
        score = minimax(state, depth - 1, -player)
        state[x][y] = 0
        score[0], score[1] = x, y

        if player == COMP1:
            if score[2] > best[2]:
                best = score  # max value
        else:
            if score[2] < best[2]:
                best = score  # min value

    return best


def clean():
    #clear the console
    os_name = platform.system().lower()
    if 'windows' in os_name:
        system('cls')
    else:
        system('clear')


def render(state, c1_choice, c2_choice):
    #Print the board on console

    chars = {
        -1: c2_choice,
        +1: c1_choice,
        0: ' '
    }
    str_line = '---------------'

    print('\n' + str_line)
    for row in state:
        for cell in row:
            symbol = chars[cell]
            print(f'| {symbol} |', end='')
        print('\n' + str_line)


def ai_turn(player, c1_choice, c2_choice):
    depth = len(empty_cells(board))
    if depth == 0 or game_over(board):
        return

    clean()
    print(f'Computer turn [{c1_choice if player == COMP1 else c2_choice}]')
    render(board, c1_choice, c2_choice)

    if depth == len(board) * len(board):
        x, y = choice([(i, j) for i in range(len(board)) for j in range(len(board))])
    else:
        move = minimax(board, depth, player)
        x, y = move[0], move[1]

    set_move(x, y, player)
    time.sleep(1)

def comp_turn(player, c1_choice, c2_choice):
    depth = len(empty_cells(board))
    if depth == 0 or game_over(board):
        return

    clean()
    print(f'Computer turn [{c1_choice if player == COMP1 else c2_choice}]')
    render(board, c1_choice, c2_choice)

    if depth == len(board) * len(board):  # Generalized for different board sizes
        x, y = choice([(i, j) for i in range(len(board)) for j in range(len(board))])
    else:
        move = minimax(board, depth, player)
        x, y = move[0], move[1]

    set_move(x, y, player)
    time.sleep(1)

def main():
    clean()
    board_size = random.randint(1, 3)
    global board
    board = [[0 for _ in range(board_size)] for _ in range(board_size)]

    # Randomly assign X or O to COMP1 and COMP2
    choices = ['X', 'O']
    random.shuffle(choices)
    c1_choice, c2_choice = choices

    # Randomly decide which player goes first
    players = [COMP1, COMP2]
    random.shuffle(players)
    first_player = players[0]
    second_player = players[1]

    # Create a mapping of player number to the string "COMP1" or "COMP2"
    player_names = {COMP1: "COMP1", COMP2: "COMP2"}

    # Used to check if they work
    print(f"{player_names[first_player]} goes first as '{c1_choice}'")
    print(f"{player_names[second_player]} goes second as '{c2_choice}'")

    # Main game loop
    turn = first_player
    while len(empty_cells(board)) > 0 and not game_over(board):
        if turn == COMP1:
            comp_turn(COMP1, c1_choice, c2_choice)
            turn = COMP2
        else:
            comp_turn(COMP2, c1_choice, c2_choice)
            turn = COMP1
        if game_over(board):
            break

    # Check the game result
    if wins(board, COMP1):
        clean()
        render(board, c1_choice, c2_choice)
        print(f'COMP1 WINS! [{c1_choice}]')
    elif wins(board, COMP2):
        clean()
        render(board, c1_choice, c2_choice)
        print(f'COMP2 WINS! [{c2_choice}]')
    else:
        clean()
        render(board, c1_choice, c2_choice)
        print('DRAW!')

    exit()

# This is the correct place for the main() call
if __name__ == '__main__':
    main()
