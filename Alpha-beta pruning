import math

MAX, MIN = float('inf'), float('-inf')
print ("(L1 means left child, L2 means right child)")

def minimax(depth, nodeIndex, maximizingPlayer, values, alpha, beta, branch_path=[]): #branch path created to handle the print statement.

    levels = int(math.log2(len(values)))

    if depth == levels:
        print(f"Evaluating leaf node {branch_path} with value {values[nodeIndex]}")
        return values[nodeIndex]

    if maximizingPlayer:
        best = MIN
        for i in range(0, 2):
            new_branch_path = branch_path + [f"L{i+1}"]
            val = minimax(depth + 1, nodeIndex * 2 + i, False, values, alpha, beta, new_branch_path)
            best = max(best, val)
            alpha = max(alpha, best)
            
            if beta <= alpha:
                print(f"Pruning branches following {new_branch_path} as beta ({beta}) <= alpha ({alpha}). Further exploration unnecessary.")
                break
        return best

    else:
        best = MAX
        for i in range(0, 2):
            new_branch_path = branch_path + [f"L{i+1}"]
            val = minimax(depth + 1, nodeIndex * 2 + i, True, values, alpha, beta, new_branch_path)
            best = min(best, val)
            beta = min(beta, best)
            
            if beta <= alpha:
                print(f"Pruning branches following {new_branch_path} as beta ({beta}) <= alpha ({alpha}). Further exploration unnecessary.")
                break
        return best

if __name__ == "__main__":
    values = [2, 3, 5, 9, 0, 1, 7, 5]
    print("The final optimal value for the maximizing player is:", minimax(0, 0, True, values, MIN, MAX, []))
